# -*- coding: utf-8 -*-
"""image_to_video.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ya5DHX52WYgudXlwJUjEU8KeCzVAz8A7
"""

import torch
from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
from moviepy.editor import ImageSequenceClip, AudioFileClip
from tkinter import Tk, filedialog
import os

# Инициализация модели Stable Diffusion
def init_model():
    pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")
    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
    pipe = pipe.to("cpu")  # Используем GPU для ускорения, если доступно
    return pipe

# Генерация последовательности кадров
def generate_video_frames(pipe, text_prompt, num_frames=30):
    frames = []
    for i in range(num_frames):
        prompt = f"{text_prompt}, frame {i+1} of {num_frames}"
        image = pipe(prompt).images[0]
        frames.append(image)
    return frames

# Создание видео из кадров
def create_video_from_frames(frames, output_path, fps=10):
    frames = [frame.convert("RGB") for frame in frames]
    clip = ImageSequenceClip(frames, fps=fps)
    clip.write_videofile(output_path, codec='libx264')

# Добавление аудио к видео
def add_audio_to_video(video_path, audio_path, output_path):
    video_clip = ImageSequenceClip(video_path)
    audio_clip = AudioFileClip(audio_path)
    final_clip = video_clip.set_audio(audio_clip)
    final_clip.write_videofile(output_path, codec='libx264')

# Основная функция
def main():
    initial_image_path = "hqdefault.jpg.png"
    text_prompt = "A sunset over the ocean, transforming into night sky"
    output_video_path = "generated_video.mp4"
    audio_path = "background_audio.mp3"
    final_output_path = "final_video_with_audio.mp4"

    # Инициализация модели
    pipe = init_model()

    # Генерация кадров
    frames = generate_video_frames(pipe, text_prompt, num_frames=30)
    create_video_from_frames(frames, output_video_path)

    # Добавление аудио
    if os.path.exists(audio_path):
        add_audio_to_video(output_video_path, audio_path, final_output_path)
        print(f"Видео с аудио сохранено в {final_output_path}")
    else:
        print(f"Аудио не найдено, сохранено только видео: {output_video_path}")

if __name__ == "__main__":
    main()